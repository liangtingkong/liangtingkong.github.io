<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/03/11/ajax/"/>
      <url>/2023/03/11/ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="ajax和json"><a href="#ajax和json" class="headerlink" title="ajax和json"></a>ajax和json</h1><p>​      无刷新获取数据</p><ul><li><p>xml  可扩展标记语言  全是自定义标签  用来表示一些数据  （被json取代)*</p></li><li><p>​    优点  </p><ul><li>无刷新获取数据    </li><li>根据事件来更新页面内容  </li></ul></li><li><p>缺点</p><ul><li>没有浏览历史，不能后退   </li><li>存在跨域问题  </li><li>seo不太友好</li></ul></li></ul><h4 id="http-协议-超文本传输协议"><a href="#http-协议-超文本传输协议" class="headerlink" title="http 协议  超文本传输协议"></a>http 协议  超文本传输协议</h4><p>规定了浏览器和万维网服务器之间互相通信的规则</p><ul><li><p>请求报文</p><ul><li><p><em>行    (GET)POST  /s?ie=utf-8  Http/1.1</em>  </p></li><li><p><em>头    HOST :  atguigu.com</em></p><p>​      <em>Cookie:  name=guigu</em></p><p>​       <em>Content-type:  application/x-www-form-urlencoded</em></p><p>​       <em>User-agent: chorme  83</em>  </p></li><li><p>空行</p></li><li><p><em>体</em>    （如果是GET，请求体为空）（POST不为空）username=admin&amp;password=admin</p></li></ul></li><li><p>响应报文</p><ul><li><p>行  HTTP/1.1（协议版本）  200（状态码）  OK（状态字符串）</p></li><li><p>头  Content-Type:text/html;charset=utf-8</p><p>​     Content-length:2048</p><p>​     Content-encoding: gzip</p></li><li><p>空行 </p></li><li><p>体 </p></li><li><p>```html</p><ul><li><ul><li> <html></li></ul><p>  ​       <em><head></head></em></p><p>  ​       <em><body></body></em></p><p>  ​      </html>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ajax操作</span><br><span class="line">  </span><br><span class="line">  1. 创建对象</span><br><span class="line">  </span><br><span class="line">  2. 初始化  设置请求方法和 url</span><br><span class="line">  </span><br><span class="line">  3. 发送</span><br><span class="line">  </span><br><span class="line">  4. 事件绑定  处理服务端返回结果</span><br><span class="line">     </span><br><span class="line">     - xhr.onreadystatechange（）  </span><br><span class="line">     - readystate是xhr的属性  表示状态 0(开始时原属性) 1(open已调用) 2(send调用完毕) 3(服务端返回部分结果)  4(返回所有结果)</span><br><span class="line">  </span><br><span class="line">  5. 代码</span><br><span class="line">     </span><br><span class="line">     ```js</span><br><span class="line">     //引入express</span><br><span class="line">     const express = require(&#x27;express&#x27;);</span><br><span class="line">     //创建应用对象</span><br><span class="line">     const app =express();</span><br><span class="line">     //创建路由规则</span><br><span class="line">     app.get(&#x27;/server&#x27;,(request,response)=&gt;&#123;</span><br><span class="line">         //设置响应头  设置允许跨域</span><br><span class="line">         response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;,&#x27;*&#x27;);</span><br><span class="line">         //设置响应体</span><br><span class="line">         response.send(&#x27;Hello ajax&#x27;);</span><br><span class="line">     &#125;);</span><br><span class="line">     //监听端口启动服务</span><br><span class="line">     app.listen(8000,()=&gt;&#123;</span><br><span class="line">         console.log(&#x27;服务器已启动,端口8000监听&#x27;);</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure></li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">   btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="comment">//ajax操作</span></span><br><span class="line">     <span class="comment">//创建对象</span></span><br><span class="line">     <span class="keyword">const</span> xhr =<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">     <span class="comment">//初始化  设置请求方法和 url</span></span><br><span class="line">     xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>)</span><br><span class="line">     <span class="comment">//发送</span></span><br><span class="line">     xhr.<span class="title function_">send</span>()</span><br><span class="line">     <span class="comment">//事件绑定  处理服务端返回结果</span></span><br><span class="line">     xhr.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="comment">//判断</span></span><br><span class="line">         <span class="keyword">if</span>(xhr.<span class="property">readyState</span>===<span class="number">4</span>)&#123;</span><br><span class="line">             <span class="comment">//判断响应状态码</span></span><br><span class="line">             <span class="keyword">if</span>(xhr.<span class="property">status</span>&gt;=<span class="number">200</span> &amp;&amp;xhr.<span class="property">status</span>&lt;<span class="number">300</span>)&#123;</span><br><span class="line">                 <span class="comment">//处理结果  行  头  空行   体</span></span><br><span class="line">                 <span class="comment">//响应行</span></span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">status</span>);<span class="comment">//响应状态码</span></span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">statusText</span>);<span class="comment">//状态字符串</span></span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">getAllResponseHeaders</span>);<span class="comment">//响应头</span></span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>);<span class="comment">//响应体</span></span><br><span class="line">             &#125;         </span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li><p>设置url参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:8000/server /* ?a=100&amp;b=200&amp;c=300&#x27;</span> */)</span><br></pre></td></tr></table></figure></li><li><p>```js</p><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Document</title>    <style>        .button{            width: 400px;            height: 100px;            border: solid 1px pink;        }<pre><code>&lt;/style&gt;</code></pre></head><body><pre><code>&lt;div class=&quot;button&quot;&gt;&lt;/div&gt;</code></pre></body><script>    const btn=document.querySelector('.button')    window.addEventListener('keydown',function(){      //ajax操作      //创建对象      const xhr =new XMLHttpRequest()      //初始化  设置请求方法和 url      xhr.open('POST','http://127.0.0.1:8000/json-server')      //自动转换       xhr.responseType="json";      //设置请求头      //xhr.setRequestHeader('Content-Type','text/html;')      //发送      xhr.send('')      //事件绑定  处理服务端返回结果      xhr.onreadystatechange=function(){          //判断          if(xhr.readyState===4){              //判断响应状态码              if(xhr.status>=200 &&xhr.status<300){                  //处理结果  行  头  空行   体                  //响应行                  //console.log(xhr.status);//响应状态码                  //console.log(xhr.statusText);//状态字符串                  //console.log(xhr.getAllResponseHeaders);//响应头                  //console.log(xhr.response);//响应体                  //console.log(xhr.response);                  btn.innerHTML=xhr.response.age<pre><code>              //手动将字符串变为对象              //let data = JSON.parse(xhr.response)              //console.log(data);          &#125;                 &#125;  &#125;&#125;)</code></pre><p></script></p></html><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">8. ```js</span><br><span class="line">   //引入express</span><br><span class="line">   const express = require(&#x27;express&#x27;);</span><br><span class="line">   const &#123; json &#125; = require(&#x27;express/lib/response&#x27;);</span><br><span class="line">   //创建应用对象</span><br><span class="line">   const app =express();</span><br><span class="line">   //创建路由规则</span><br><span class="line">   app.get(&#x27;/server&#x27;,(request,response)=&gt;&#123;</span><br><span class="line">       //设置响应头  设置允许跨域</span><br><span class="line">       response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;,&#x27;*&#x27;);</span><br><span class="line">       //设置响应体</span><br><span class="line">       response.send(&#x27;Hello ajax&#x27;);</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line">   app.all(&#x27;/json-server&#x27;,(request,response)=&gt;&#123;</span><br><span class="line">       //设置响应头  设置允许跨域</span><br><span class="line">       response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;,&#x27;*&#x27;);</span><br><span class="line">       response.setHeader(&#x27;Access-Control-Allow-Headers&#x27;,&#x27;*&#x27;)</span><br><span class="line">       //响应数据 </span><br><span class="line">       const data=&#123;</span><br><span class="line">           name:&#x27;mqm&#x27;,</span><br><span class="line">           age:23</span><br><span class="line">       &#125;</span><br><span class="line">       //对对象进行字符串转换  </span><br><span class="line">       let str  = JSON.stringify(data)</span><br><span class="line">       //设置响应体</span><br><span class="line">       response.send(str);</span><br><span class="line">   &#125;);</span><br><span class="line">   //监听端口启动服务</span><br><span class="line">   app.listen(8000,()=&gt;&#123;</span><br><span class="line">       console.log(&#x27;服务器已启动,端口8000监听&#x27;);</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="json"><a href="#json" class="headerlink" title="json"></a>json</h4><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h4><ul><li>同源：协议，域名，端口号，必须相同ajax默认同源策略     违背就是跨域</li></ul><h4 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h4><ul><li><p>非官方跨域解决方案，只接受get请求</p></li><li><p>jsonp借助页面的script标签来跨域的</p></li><li><p>jsonp的使用</p><p>1.在页面中通过script标签引用服务器</p><p>2.在页面中写一个处理数据的函数</p><p>3.服务器返回的返回结果形式为函数调用</p></li></ul><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><ul><li><p>cors 跨域资源共享，官方的跨域解决办法</p><p>特点：</p><p>不需要在客服端做任何特殊的操作，完全在服务器进行，支持get和post</p></li><li><p>cors如何工作？</p><p>cors是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/11/jq/"/>
      <url>/2023/03/11/jq/</url>
      
        <content type="html"><![CDATA[<p>  <em>//classlist返回类名  classlist0.add()添加类名   classlist.remove()去掉类名    classlist.toggle切换类名  有则删除无则加上</em></p><p>   <em>//本地存储网页存储  sessionStorage.setItem(名字,值);存储数据   sessionStorage.getItem(名字)获取数据  sessionStorage.removeItem()删除数据  sessionStorage.clear()清楚所有数据  关闭页面数据消失</em></p><p>   <em>//浏览器存储  localStorage.setItem(名字,值);存储数据  ++;</em></p><p>   <em>//jQuery  $是jq的顶级对象  $获取的是jq对象    jq和原生js不能混用</em></p><p>   <em>//jq对象转换为dom对象  1.$(‘div’)[index]  2.$(‘div’).get(0)</em> </p><p>   <em>//筛选选择器 ;eq(index)</em> </p><p>   <em>//$(‘div’).css(‘属性名’，属性值);</em></p><p>   <em>//类操作 $(‘div’).addClass(‘shuxing’)</em></p><p>   <em>//show(speed,[easing],[fn]) 显示  隐藏  .hide()  切换,toggle()   slideDown/up下拉上拉   slidetoggle()上拉</em></p><p>   <em>//prop()  element.prop()获取属性   $(‘div’).prop(‘shuxingming’,’’)设置属性</em></p><p>   <em>//$(‘div’).each(function(index,dom)) each遍历</em></p><p>   <em>//数据可视化  将数据转换为图形</em></p><p>   <em>//相关配置  title：标题组件  tooltip 提示栏组件  legend图例组件  toolbox工具栏  grid  直角坐标系内绘图网络  (x/y)Axis  x/y轴 series  系列列表  color颜色列表</em></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/11/es6/"/>
      <url>/2023/03/11/es6/</url>
      
        <content type="html"><![CDATA[<h1 id="ES-6-11"><a href="#ES-6-11" class="headerlink" title="ES 6~11"></a>ES 6~11</h1><h4 id="为什么学习新特性"><a href="#为什么学习新特性" class="headerlink" title="为什么学习新特性"></a>为什么学习新特性</h4><ol><li>语法简洁，功能强大</li><li>框架开发应用</li><li>前端开发职位要求</li></ol><h4 id="let变量"><a href="#let变量" class="headerlink" title="let变量"></a>let变量</h4><ol><li><p>变量不能重复声明</p></li><li><p>块级作用域:只在()/(代码块)里有用</p></li><li><p>不存在变量提升：不允许在变量之前使用变量</p></li><li><p>不影响作用域链：</p></li></ol><h4 id="声明常量-const-i"><a href="#声明常量-const-i" class="headerlink" title="声明常量  const  i"></a>声明常量  const  i</h4><ol><li>一定要赋值</li><li>一般常量使用大写</li><li>常量值不能修改</li><li>块级作用域</li><li>对于数组和对象的元素修改，不算对常量的修改，不会报错</li></ol><h4 id="解构赋值-好处：可以直接调用"><a href="#解构赋值-好处：可以直接调用" class="headerlink" title="解构赋值(好处：可以直接调用)"></a>解构赋值(好处：可以直接调用)</h4><ol><li><h6 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">F3</span>=[<span class="string">&#x27;电&#x27;</span>,<span class="string">&#x27;锯&#x27;</span>,<span class="string">&#x27;人&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [dian,ju,ren] =<span class="variable constant_">F3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dian);</span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br></pre></td></tr></table></figure></li><li><p>对象解构</p><ol><li>const zhao={<br>name:’mqm’,<br>age:’22’,<br>fangfa:function(){<br> log(‘xiaopin’);<br>}<br>}<br>let {name,age,fangfa}=zhao;<br>log(name);</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">####   模板字符串   [``]    &#x27;  &#x27;   &quot;&quot;</span><br><span class="line"></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">~~~js</span><br><span class="line"></span><br><span class="line">let name = `woyesg`;</span><br><span class="line">console.log(name);</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">######   特性</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">1. 内容可以直接出现换行符</span><br><span class="line">let name = `woyes</span><br><span class="line">gfchgfgjh</span><br><span class="line">gfvjhjhk`;</span><br><span class="line">2. 直接进行变量拼接</span><br><span class="line">  let age=`1`;</span><br><span class="line">  let name=`$&#123;age&#125;2`;</span><br><span class="line">  console.log(name);</span><br></pre></td></tr></table></figure><h4 id="es6简化对象"><a href="#es6简化对象" class="headerlink" title="es6简化对象"></a>es6简化对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name=<span class="string">&#x27;王硕&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> option=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> school=&#123;</span><br><span class="line">  name,</span><br><span class="line">  option,</span><br><span class="line">  <span class="attr">improve</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name)&#125;,</span><br><span class="line">简化</span><br><span class="line">    <span class="title function_">improve</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="箭头函数-gt"><a href="#箭头函数-gt" class="headerlink" title="箭头函数 =&gt;"></a>箭头函数 =&gt;</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">简化</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fns</span> =(<span class="params"></span>)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h6><ul><li>=&gt;所调用函数中的this是静态的只会指向全局作用域中的那个元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fns</span> =(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">name</span>=<span class="string">&#x27;es6&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> school=&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;ajax&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="title function_">fns</span>();</span><br><span class="line"></span><br><span class="line">fn.<span class="title function_">call</span>(school);</span><br><span class="line">fns.<span class="title function_">call</span>(school);</span><br></pre></td></tr></table></figure><img title="" src="file:///D:/前端/markdown/图片/QQ截图20220413204131.png" alt="" style="zoom:200%;"><ul><li><p>不能作为构造实例化对象</p></li><li><p>不能使用arguments变量</p></li><li><p>箭头函数的简写</p><ul><li><p>形参只有一个的时候，可以省略小括号</p></li><li><p>代码题只有一条的时候，可以省略花括号  此时return必须省略  </p></li></ul></li></ul><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><ul><li>箭头函数适合于this无关的回调，定时器，数组的方法回调</li><li>不适合于this有关的回调，事件回调，对象的方法</li></ul><h4 id="参数赋初始值"><a href="#参数赋初始值" class="headerlink" title="参数赋初始值"></a>参数赋初始值</h4><ul><li><h6 id="给形参的赋初始值（一般形参赋值给最后）"><a href="#给形参的赋初始值（一般形参赋值给最后）" class="headerlink" title="给形参的赋初始值（一般形参赋值给最后）"></a>给形参的赋初始值（一般形参赋值给最后）</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b,c=<span class="number">10</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><img title="" src="file:///D:/前端/markdown/图片/QQ截图20220413211824.png" alt="" style="zoom:200%;"></li><li><h6 id="与解构赋值结合使用"><a href="#与解构赋值结合使用" class="headerlink" title="与解构赋值结合使用"></a>与解构赋值结合使用</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;host=<span class="string">&#x27;127.0.0.0&#x27;</span>,username,password,port&#125;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(host);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(password);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(port);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">connect</span>(&#123;</span><br><span class="line">        <span class="attr">username</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>:<span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="attr">port</span>:<span class="number">336</span></span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="rest参数，获取函数实参，代替arguments"><a href="#rest参数，获取函数实参，代替arguments" class="headerlink" title="rest参数，获取函数实参，代替arguments"></a>rest参数，获取函数实参，代替arguments</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">data</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">data</span>(<span class="string">&#x27;sabjdkn&#x27;</span>,<span class="string">&#x27;asdbkjas&#x27;</span>,<span class="string">&#x27;gaishkdk&#x27;</span>);</span><br></pre></td></tr></table></figure><p>返回的为数组</p><p>rest参数必须要放到最后</p><h3 id="es-6扩展运算符"><a href="#es-6扩展运算符" class="headerlink" title="es 6扩展运算符"></a>es 6扩展运算符</h3><p>能将数组转换为逗号分隔的参数序列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;wang&#x27;</span>,<span class="string">&#x27;sun&#x27;</span>,<span class="string">&#x27;li&#x27;</span>];</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">express</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">express</span>(arr);</span><br><span class="line">    <span class="title function_">express</span>(...arr);</span><br></pre></td></tr></table></figure><p><img src="D:\前端\markdown\图片\QQ截图20220413220223.png"></p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul><li><h6 id="数组的合并"><a href="#数组的合并" class="headerlink" title="数组的合并"></a>数组的合并</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;wang&#x27;</span>,<span class="string">&#x27;sun&#x27;</span>,<span class="string">&#x27;li&#x27;</span>];</span><br><span class="line">      <span class="keyword">const</span> arrs = [<span class="string">&#x27;zhou&#x27;</span>,<span class="string">&#x27;wu&#x27;</span>,<span class="string">&#x27;zheng&#x27;</span>];</span><br><span class="line">      <span class="keyword">const</span> arrest = [...arr,...arrs];</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(arrest);</span><br></pre></td></tr></table></figure><p><img src="D:\前端\markdown\图片\QQ截图20220413220642.png"></p></li><li><h6 id="数组的克隆-浅拷贝"><a href="#数组的克隆-浅拷贝" class="headerlink" title="数组的克隆(浅拷贝)"></a>数组的克隆(浅拷贝)</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;wang&#x27;</span>,<span class="string">&#x27;sun&#x27;</span>,<span class="string">&#x27;li&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arrs = [...arr];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrs);</span><br></pre></td></tr></table></figure></li><li><h6 id="将为数组转为真正的数组"><a href="#将为数组转为真正的数组" class="headerlink" title="将为数组转为真正的数组"></a>将为数组转为真正的数组</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">     <span class="keyword">const</span> divarr = [...divs];</span><br></pre></td></tr></table></figure><p>讲对象转换为数组</p><h4 id="symbol基本使用"><a href="#symbol基本使用" class="headerlink" title="symbol基本使用"></a>symbol基本使用</h4><p>symbol是新的数组类型，表示独一无二的值，是 js 中的第七种数组类型</p><h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><ul><li><p>值是唯一，解决命名冲突</p></li><li><p>symbol值不能与其他数据进行运算</p></li><li><p>symbol定义的对象不能使用for…in遍历，但是可以使用Reflext.ownKeys来获取对象的所有键名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//创建symbol</span><br><span class="line">     //第一种方法</span><br><span class="line">    let s = Symbol();</span><br><span class="line">    console.log(s,typeof s);</span><br></pre></td></tr></table></figure><pre><code> let s1=Symbol(&#39;wang&#39;); console.log(s1); let s2=Symbol(&#39;wang&#39;) console.log(s2); console.log(s1===s2); //第二种方法    let s3 = Symbol.for(&#39;wang&#39;); let s4 = Symbol.for(&#39;wang&#39;); console.log(s3===s4);</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;C:\Users\86173\Desktop\markdown\图片\QQ截图20220413222850.png&quot; style=&quot;zoom:200%;&quot; /&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>第二种方法中s3===s4</p><h6 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h6><ul><li>不能运算对比</li></ul><h6 id="js数组类型总结"><a href="#js数组类型总结" class="headerlink" title="js数组类型总结"></a>js数组类型总结</h6><ul><li><p>undefined</p></li><li><p>string</p></li><li><p>object</p></li><li><p>null</p></li><li><p>number</p></li><li><p>boolean</p></li><li><p>symbol</p><h4 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h4><h6 id="symbol的使用"><a href="#symbol的使用" class="headerlink" title="symbol的使用"></a>symbol的使用</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在对象中添加方法 up down</span></span><br><span class="line"><span class="keyword">let</span> game=&#123;</span><br><span class="line">  <span class="attr">up</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">  <span class="attr">dowm</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//声明对象</span></span><br><span class="line"><span class="keyword">let</span> methods=&#123;</span><br><span class="line">  <span class="attr">up</span>:<span class="title class_">Symbol</span>(),</span><br><span class="line">  <span class="attr">down</span>:<span class="title class_">Symbol</span>()</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line">game[methods.<span class="property">up</span>]=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;上升&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">game[methods.<span class="property">down</span>]=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;下降&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">game[methods.<span class="property">up</span>]()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> youxi=&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;jjxx&#x27;</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&#x27;say&#x27;</span>)]:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;shuo&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&#x27;zibao&#x27;</span>)]:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;zibao&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(youxi);</span><br></pre></td></tr></table></figure><h6 id="symbol的内置值（symbol的属性）"><a href="#symbol的内置值（symbol的属性）" class="headerlink" title="symbol的内置值（symbol的属性）"></a>symbol的内置值（symbol的属性）</h6><p>来改变对象在特定场景下的功能</p></li></ul><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组连接是否展开Symbol.isConcatSpreadable</span></span><br><span class="line"><span class="keyword">const</span> alpha = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> numeric = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> alphaNumeric = alpha.<span class="title function_">concat</span>(numeric);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphaNumeric);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">numeric[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] = <span class="literal">false</span>;</span><br><span class="line">alphaNumeric = alpha.<span class="title function_">concat</span>(numeric);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphaNumeric);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, Array [1, 2, 3]]</span></span><br></pre></td></tr></table></figure>### 迭代器迭代器（iteration）是一种接口，为不同的数据结构提供统一的访问机制只有有iteration接口，就可以完成遍历操作- es6有for...of循环     iteration接口主要使用for...of- 原生具有iteration接口的数据有  1. array  2. arguments  3. set  4. map  5. string  6. typedarray  7. nodelist  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">in</span> arr)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><img title="" src="file:///D:/前端/markdown/图片/QQ截图20220414201530.png" alt="" style="zoom: 67%;"><p>​                            of    遍历的键值    in  遍历的键名</p><ul><li><p>工作原理（C语言链表相似）（迭代器用来达到自定义遍历）</p><ul><li>创建一个指针对象，指向当前的初始位置</li><li>第一次调用对象的next方法，指针指向第一个成员</li><li>不断调用next，指针自动指向下一个成员</li><li>调用next方法返回一个value和done属性的对象</li></ul></li><li><p>应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> classes = &#123;</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;ym&#x27;</span>,</span><br><span class="line">       <span class="attr">stus</span>: [</span><br><span class="line">         <span class="string">&#x27;ming&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;ning&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;tian&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;knight&#x27;</span></span><br><span class="line">       ],</span><br><span class="line">       [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">         <span class="comment">//索引变量</span></span><br><span class="line">         <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">         <span class="comment">//next方法</span></span><br><span class="line">         <span class="keyword">return</span> &#123;</span><br><span class="line">           <span class="comment">//next返回一个value和done的对象</span></span><br><span class="line">           <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">             <span class="keyword">if</span> (index &lt; <span class="variable language_">this</span>.<span class="property">stus</span>.<span class="property">length</span>) &#123;</span><br><span class="line">               <span class="keyword">const</span> result = &#123;</span><br><span class="line">                   <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">stus</span>[index], </span><br><span class="line">                   <span class="attr">done</span>: <span class="literal">false</span> </span><br><span class="line">               &#125;;</span><br><span class="line">               <span class="comment">//下标自增</span></span><br><span class="line">               index++;</span><br><span class="line">               <span class="comment">//返回结果</span></span><br><span class="line">               <span class="keyword">return</span> result</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> classes) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>通过添加迭代器来进行对自定义对象的遍历</p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>一个特殊的函数    =&gt;进行异步编程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//yield是函数代码的分隔符</span></span><br><span class="line"><span class="comment">//function 后+* 是生成器的语法</span></span><br><span class="line">    <span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">      <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><pre><code> let iterator = gen(); console.log(iterator.next()) console.log(iterator.next()) for(let v of gen())&#123;   console.log(v); &#125;</code></pre></li></ul><p><img src="D:\前端\markdown\图片\QQ截图20220414211656.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> 生成器传参</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">     <span class="keyword">let</span> one=<span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(one);</span><br><span class="line">     <span class="keyword">let</span> two=<span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(two);</span><br><span class="line">     <span class="keyword">yield</span>    <span class="number">1111</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="number">111</span>);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="number">222</span>))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="number">333</span>))</span><br></pre></td></tr></table></figure><p><img src="D:\前端\markdown\图片\QQ截图20220414213754.png"></p><p>next（）传进去的参数作为yeild的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成器示例</span></span><br><span class="line"><span class="comment">//1s后输出111 /2s后输出222   /3s后输出333 </span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)<span class="number">1</span>&#123;</span><br><span class="line">          <span class="title function_">alert</span>(<span class="number">111</span>);</span><br><span class="line">          iterator.<span class="title function_">next</span>();</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="title function_">alert</span>(<span class="number">222</span>);</span><br><span class="line">          iterator.<span class="title function_">next</span>();</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="title function_">alert</span>(<span class="number">333</span>);</span><br><span class="line">          iterator.<span class="title function_">next</span>();</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span>  * <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="title function_">one</span>();</span><br><span class="line">        <span class="keyword">yield</span> <span class="title function_">two</span>();</span><br><span class="line">        <span class="keyword">yield</span> <span class="title function_">three</span>();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> iterator=<span class="title function_">setup</span>();</span><br><span class="line">      iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><h4 id="Promise（先跳过）"><a href="#Promise（先跳过）" class="headerlink" title="Promise（先跳过）"></a>Promise（先跳过）</h4><p>promise一个构造函数   用来封装异步操作并可以获取或失败的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//promise实例化</span></span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve,reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> data  = <span class="string">&#x27;shuju&#x27;</span>;</span><br><span class="line">      <span class="comment">//resolve(data)   成功</span></span><br><span class="line">      <span class="keyword">let</span> err = <span class="string">&#x27;shibai&#x27;</span>;</span><br><span class="line">      <span class="title function_">reject</span>(err)  <span class="comment">//失败</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;); </span><br><span class="line"></span><br><span class="line">  <span class="comment">//调用proimse  then方法</span></span><br><span class="line">  p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);<span class="comment">//成功调用这个</span></span><br><span class="line"></span><br><span class="line">  &#125;,<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(reason);<span class="comment">//失败调用这个</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="set-集合"><a href="#set-集合" class="headerlink" title="set(集合)"></a>set(集合)</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set">MDN集合</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明set</span></span><br><span class="line">      <span class="keyword">let</span> s=<span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">      <span class="keyword">let</span> s2=<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">5</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">9</span>]);</span><br><span class="line">      <span class="comment">//size  元素个数</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="property">size</span>);</span><br><span class="line">      <span class="comment">//add  添加元素</span></span><br><span class="line">      s2.<span class="title function_">add</span>(<span class="number">2</span>)</span><br><span class="line">      <span class="comment">//delete  删除元素</span></span><br><span class="line">      s2.<span class="title function_">delete</span>(<span class="number">5</span>)</span><br><span class="line">      <span class="comment">//has  检测</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="title function_">has</span>(<span class="number">5</span>));</span><br><span class="line">      <span class="comment">//clear 清空</span></span><br><span class="line">      s2.<span class="title function_">clear</span>()</span><br><span class="line"></span><br><span class="line">      <span class="comment">//for of   遍历</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> s2)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="comment">//数组去重</span></span><br><span class="line">    <span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    <span class="comment">//交集</span></span><br><span class="line">    <span class="keyword">let</span> arr2=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">let</span> a2=[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> s2=<span class="keyword">new</span> <span class="title class_">Set</span>(arr2);</span><br><span class="line">      <span class="keyword">if</span>(s2.<span class="title function_">has</span>(item))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//let a2=[...new Set(arr)].filter(item =&gt; new Set(arr2).has(item))</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//并集</span></span><br><span class="line">    <span class="keyword">let</span> union=[...<span class="keyword">new</span> <span class="title class_">Set</span>([...arr,...arr2])]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//差集</span></span><br><span class="line">    <span class="keyword">let</span> a3=[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span>! (<span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item)))</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map">MDNmap</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明map</span></span><br><span class="line">     <span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">     <span class="comment">//set 添加元素    set(&#x27;键名&#x27;，‘键值)</span></span><br><span class="line">     m.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;mqm&#x27;</span>)</span><br><span class="line">     m.<span class="title function_">set</span>(<span class="string">&#x27;change&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;222222222&#x27;</span>);</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="keyword">let</span> key =&#123;</span><br><span class="line">       <span class="attr">school</span>:<span class="string">&#x27;hdu&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     m.<span class="title function_">set</span>(key , [<span class="number">222222</span>,<span class="number">5555</span>])</span><br><span class="line"></span><br><span class="line">     <span class="comment">//size</span></span><br><span class="line"></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">size</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//delete</span></span><br><span class="line"></span><br><span class="line">     m.<span class="title function_">delete</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">     <span class="comment">//获取</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="string">&#x27;change&#x27;</span>));</span><br><span class="line"></span><br><span class="line">     <span class="comment">//清空</span></span><br><span class="line">    m.<span class="title function_">clear</span>()</span><br><span class="line"></span><br><span class="line">     <span class="comment">//遍历</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> m)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h3 id="class-类"><a href="#class-类" class="headerlink" title="class 类"></a>class 类</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes">MDN类</a></p><p>类是一种特殊的函数，定义类有两种方法，一种是类声明（类声明并不想函数声明一样会被提升），另一种是类表达式。</p><ul><li><p>类体和方法定义</p><ul><li><p>类中有一个唯一的constructor,用于创建和初始化 class创建的对象</p></li><li><p>类中方法的添加是直接添加函数体</p></li><li><p>```js</p><pre><code>  class Person&#123;    constructor(name,age)&#123;      this.name=name      this.age=age    &#125;    setName(name)&#123;      this.name=name    &#125;  &#125;  let s=new Person(&#39;mqm&#39;,25)  s.setName(&#39;wangshuo&#39;)  console.log(s);</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 类的静态成员</span><br><span class="line">  </span><br><span class="line">  只属于类，并不能属于实例化对象   使用static</span><br><span class="line">  </span><br><span class="line">  ```js</span><br><span class="line">  class Point &#123;</span><br><span class="line">      constructor(x, y) &#123;</span><br><span class="line">          this.x = x;</span><br><span class="line">          this.y = y;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      static displayName = &quot;Point&quot;;</span><br><span class="line">  </span><br><span class="line">      static distance(a, b) &#123;</span><br><span class="line">          const dx = a.x - b.x;</span><br><span class="line">          const dy = a.y - b.y;</span><br><span class="line">          return Math.hypot(dx, dy);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  const p1 = new Point(5, 5);</span><br><span class="line">  const p2 = new Point(10,10);</span><br><span class="line">  p1.displayName;</span><br><span class="line">  // undefined</span><br><span class="line">  p1.distance;</span><br><span class="line">  // undefined</span><br><span class="line">  </span><br><span class="line">  console.log(Point.displayName);</span><br><span class="line">  // &quot;Point&quot;</span><br><span class="line">  console.log(Point.distance(p1, p2));</span><br><span class="line">  // 7.0710678118654755</span><br></pre></td></tr></table></figure></li></ul></li><li><p>类的继承 </p><ul><li><p>使用extends扩展子类</p></li><li><p>super()调用原函数                                        super()(用于访问和调用一个对象的父对象上的函数。)</p></li><li><p>```js</p><pre><code> class Phone&#123;    constructor(brand,price)&#123;      this.brand=brand      this.price=price    &#125;    call()&#123;      console.log(&#39;我可以打电话&#39;);    &#125;  &#125;  class SmaartPhone extends Phone&#123;    constructor(brand,price,color,size)&#123;      super(brand,price)      this.color=color      this.size=size    &#125;    photo()&#123;      console.log(拍照);    &#125;  &#125;  const oppo=new SmaartPhone (&#39;oppo&#39;,1299,&#39;黑色&#39;,&#39;11.inch&#39;)  console.log(oppo);</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    &lt;img title=&quot;&quot; src=&quot;file:///D:/前端/markdown/图片/QQ图片20220505215656.png&quot; alt=&quot;&quot; style=&quot;zoom:150%;&quot;&gt;</span><br><span class="line"></span><br><span class="line">- getter  和setter</span><br><span class="line">  </span><br><span class="line">  - get  对某一个属性进行获取时  函数被调用</span><br><span class="line">  </span><br><span class="line">  - set对某一个属性进行设置时  函数被调用</span><br><span class="line">  </span><br><span class="line">  - ```js</span><br><span class="line">     class Phone&#123;</span><br><span class="line">           get price()&#123;</span><br><span class="line">             console.log(&#x27;价格被读取了&#x27;);</span><br><span class="line">             return  0</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><pre><code>   set price(money)&#123;     console.log(&#39;价格修改了&#39;);   &#125; &#125; //实例化 let s= new Phone() console.log(s.price); // s.price=55</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](C:\Users\86173\Desktop\markdown\图片\QQ截图20220506185548.png)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h3><ul><li><p>Number.<em>EPSILON</em>=2.220446049250313e-16</p><p>是js表示的最小精度 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span>+<span class="number">0.2</span>===<span class="number">0.3</span>);<span class="comment">///false</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">equal</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(a-b) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">equal</span>(<span class="number">0.3</span>,(<span class="number">0.1</span>+<span class="number">0.2</span>)));<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>二进制与八进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b=<span class="number">0b101010</span><span class="comment">//二进制</span></span><br><span class="line">     <span class="keyword">let</span> c=<span class="number">0o77777</span>  <span class="comment">//八进制</span></span><br><span class="line">     <span class="keyword">let</span> d=<span class="number">0xffff</span>   <span class="comment">//十六进制</span></span><br></pre></td></tr></table></figure></li><li><p>Number.isFinite(num)    鉴定一个数值是否为有限数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">1000</span>));<span class="comment">//true</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p>Number.isNaN()判断一个函数是否为nan</p></li><li><p>Number.parseInt() 整数  Number.parseFloat()   浮点数  字符串转换为数字</p></li><li><p>Number.isInteger()检测一个数是否为整数</p></li><li><p>Math.trunc()将数字的小数部分抹去</p></li><li><p>Math.sign()  判断一个函数是正数(1)  负数(0)   还是零 (-1)</p></li></ul><h3 id="对象方法的扩展"><a href="#对象方法的扩展" class="headerlink" title="对象方法的扩展"></a>对象方法的扩展</h3><ul><li><p>Object.is(a,b)判断两个值是否相等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>,<span class="title class_">NaN</span>)<span class="comment">//true</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>===<span class="title class_">NaN</span>)   <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p>Object.assign(a,b)  对对象进行合并  若a对象与b对象有相同的属性名，其中a的属性值将被覆盖掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1=&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;mqm&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">22</span>,</span><br><span class="line">  <span class="attr">skill</span>:<span class="string">&#x27;killing&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s2=&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;anben&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">44</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(s1,s2))</span><br></pre></td></tr></table></figure><p><img src="D:\前端\markdown\图片\QQ截图20220506195315.png"></p></li></ul><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>将大的程序文件拆分成小的程序文件，然后将小文件组合起来</p><ul><li><p>模块化的好处</p><ul><li>防止命名冲突</li><li>代码复用</li><li>高维护性</li></ul></li><li><p>模块化规范</p><ul><li>CommonJs=&gt; nodeJs/browserify</li><li>AMD  =&gt;  requireJs</li><li>CMD =&gt; seaJs</li></ul></li><li><p>模块化语法</p><p>模块功能主要有两个命令构成   export   和   import</p><ul><li>export命令 用于规定模块的 <strong>对外</strong> 接口</li><li>import命令用于<strong>输入</strong>其他模块提供的功能</li><li><img src="D:\前端\markdown\图片\QQ图片20220509191017.png" alt="引用模块"></li><li><img src="D:\前端\markdown\图片\QQ图片20220509191022.png" alt="模块"></li><li><img src="D:\前端\markdown\图片\QQ图片20220509191055.png"></li></ul></li><li><p>暴露语法</p><ul><li>```js<br>//分别暴露<br>export let school=”htu”export function teach(){<pre><code>console.log(&#39;sb学校&#39;);</code></pre>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//统一暴露</span><br><span class="line">export &#123;school,teach&#125;</span><br><span class="line"></span><br><span class="line">//默认暴露</span><br><span class="line">export default&#123;</span><br><span class="line"></span><br><span class="line">    name:&#x27;mqm&#x27;,</span><br><span class="line">    age:22</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 引入模块</span><br><span class="line">  </span><br><span class="line">  - ```js</span><br><span class="line">        //通用导入方式</span><br><span class="line">        //引入m1.js 模块内容</span><br><span class="line">        import * as m1 from &quot;../js/m1.js&quot;;</span><br><span class="line">        console.log(m1);</span><br></pre></td></tr></table></figure><pre><code>//解构赋值形式import&#123;school,teach&#125; from  &quot;../js/m1.js&quot;;import&#123;school as xuexiao&#125; from  &quot;../js/m1.js&quot;;//重名情况console.log(school);console.log(xuexiao);//默认暴露import &#123;default as m3&#125; from &quot;../js/m1.js&quot;;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">    </span><br></pre></td></tr></table></figure></li></ul></li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/11/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/"/>
      <url>/2023/03/11/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>防抖：前面的所有触发都取消，最后一次在规定时间才会触发</p><p>（如果触发很多次，那么就会执行最后一次,在规定时间之后）</p><p>节流：在规定的时间范围不会重复触发回调，只有大于这个时间间隔才会触发回调，把频繁触发变为少量触发</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/11/VUE/"/>
      <url>/2023/03/11/VUE/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/11/Object%E9%94%AE%E5%80%BC%E5%AF%B9%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/03/11/Object%E9%94%AE%E5%80%BC%E5%AF%B9%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="Object键值对类型的对象"><a href="#Object键值对类型的对象" class="headerlink" title="Object键值对类型的对象"></a>Object键值对类型的对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object.<span class="title function_">values</span>(obj)  <span class="comment">//返还对象中的值</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object.<span class="title function_">keys</span>(obj)<span class="comment">//返还对象中的键</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/11/node.js/"/>
      <url>/2023/03/11/node.js/</url>
      
        <content type="html"><![CDATA[<h1 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h1><h5 id="基础窗口"><a href="#基础窗口" class="headerlink" title="基础窗口"></a>基础窗口</h5><p>命令行窗口 、cmd窗口</p><ul><li><p>1.开始菜单  –&gt;运行 —&gt; cmd—&gt;回车</p></li><li><p>2.常用指令：</p><p> dir 列出当前目录下的所有文件</p><p>md 目录名 创建一个文件夹</p><p>cd 进入指定的目录</p><p>rd 删除一个文件</p></li><li><p>3.目录</p><p> .   表示当前目录</p><p> ..  表示上一级目录</p></li><li><p>4.环境变量（）windows系统里的变量</p><p> path</p><p>C:\Program Files\Java\jdk-19\bin</p></li><li><p>当我们在cmd中打开一个文件，或调用一个文件时。</p><p>系统会首先在当前目录下寻找文件程序，如          果找到了则之间打开如果没有则会依次到path环境变量path中寻找，直到找到为止，如果没有就报错</p><p>所以我们可以将一些经常需要的文件的路径加入其中</p></li></ul><h6 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h6><ul><li><p>进程</p><p>进程负责为车鞥徐的运行提供必备的环境</p><p>相当于工厂的车间</p></li><li><p>线程</p><p>线程：计算机中的最小的计算单位，线程负责执行进程中的程序</p><p>相当于工厂中的工人</p></li><li><p>单线程</p><p>js是单线程</p></li><li><p>多线程</p></li></ul><h6 id="node-js-1"><a href="#node-js-1" class="headerlink" title="node.js"></a>node.js</h6><ul><li><p>简介</p><p>node.js是一个能在服务器端运行javascript的开放源代码。跨平台javascript运行环境</p><p>node采用v8引擎运行js代码，使用事件驱动、非阻塞、和异步I/O模型等来提高基础</p></li><li><p>node的服务器是单线程</p><p>node是单线程但是后面有一个I/O线程池</p></li></ul><h6 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h6><ul><li><p>CommonJs</p><p>模块引用</p><p>在Node中   require()函数来引用外部的模块</p><p>require()可以传递一个文件的路径作为参数，node将自动根据该路径来引用外部模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;&#x27;</span>)<span class="comment">//路径使用相对路径</span></span><br><span class="line"><span class="comment">//引入模块以后，该函数返回一个对象，这个对象为引入的模块</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">x</span>=<span class="string">&#x27;1111&#x27;</span><span class="comment">//使用exports暴露属性和方法</span></span><br></pre></td></tr></table></figure><p>模块定义</p><p>模块标识</p></li><li><p>模块化</p><p>node中 每个js文件都是一个模块</p><p>node中，每一个js文件的js代码都是独立运行在一个函数中，而不是全局作用域，所以一个模块化中的变量和函数在其他模块无法访问</p></li><li><p>npm（node package manager）</p><p>对于node来说 npm帮助其完成了第三方模块的发布、安装和依赖等。借助npm Node与第三方模块之间形成了很好的一个生态系统</p></li><li><p>npm命令</p><p>npm -v  查看npm的版本</p><p>npm version 查看所有模块的版本</p><p>npm search  包名   搜索包</p><p>npm install/ i   包名  安装包</p><p>npm remove/r   包名  删除包</p><p>npm install   包名  –save  安装包并添加到依赖中</p><p>npm install   下载当前依赖所需的包  </p></li><li><p>node搜索包</p><p>node在使用模块名字来引入模块时，它会当前目录的node_modules中寻找，若没有，择取上一级目录的node_modules中寻找，直到找到磁盘的跟目录，若没有则报错 </p></li><li><p>buffer（缓冲区）</p><p>buttfer的结构和数组很像，操作的方法也和数组类似</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/11/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6/"/>
      <url>/2023/03/11/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="js原型与原型链"><a href="#js原型与原型链" class="headerlink" title="js原型与原型链"></a>js原型与原型链</h3><h5 id="js原型"><a href="#js原型" class="headerlink" title="js原型"></a>js原型</h5><ul><li><p>函数的prototype属性</p><ul><li><p>每个函数都有一个prototype属性，它默认指向一个object空对象（即为原型对象）</p></li><li><p>原型对象有一个属性constructor，它指向函数对象</p></li><li><p>` function fn (){}</p><p>        console.log(fn.prototype.constructor === fn)； ////true</p><p>`</p></li></ul><p>给原型对象添加属性（一般是方法）==&gt;实例对象引用</p></li><li><p>显示原型属性与隐式原型属性</p><p>函数中，都有一个prototype（显示原型属性），它指向函数的原型对象</p><p>实例对象中，都存在一个<code>__proto__</code>(隐式原型属性)，它指向函数的原型对象</p><p><img src="D:\前端\markdown\图片\QQ截图20220420205026.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn.__proto__===Fn.prototype</span><br></pre></td></tr></table></figure></li></ul><h5 id="Object对象与Function函数-与Object-prototype"><a href="#Object对象与Function函数-与Object-prototype" class="headerlink" title="Object对象与Function函数    与Object.prototype"></a>Object对象与Function函数    与Object.prototype</h5><p>在了解原型与原型链之前，先简单理解一下Object对象    Function函数</p><p>object对象   ：在js中几乎所有的对象都是object对象的实例    由于这层关系，根据实例对象中的原型属性最终都可以找到Object.prototype</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实例对象.__proto__    ==&gt;Object.prototype</span><br></pre></td></tr></table></figure><p>Function函数：简单来说每个 JavaScript 函数实际上都是一个 <code>Function</code> 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;).<span class="property">constructor</span> === <span class="title class_">Function</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在根据原型的性质，所有的函数的隐式原型属性都指向Function.prototype</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;&#125;).__proto__ === Function.prototype//true</span><br></pre></td></tr></table></figure><h5 id="函数与对象的完整原型链"><a href="#函数与对象的完整原型链" class="headerlink" title="函数与对象的完整原型链"></a>函数与对象的完整原型链</h5><p><img src="D:\前端\markdown\图片\yuanxinglian.png"></p><h5 id="原型链的作用：继承"><a href="#原型链的作用：继承" class="headerlink" title="原型链的作用：继承"></a>原型链的作用：继承</h5><p>js在Object.prototype这个原型链的终点上部署了一些方法来实现js标准库中一些方法的实现</p><p>js在对象调用一个函数/属性，先是通过函数本身寻找，若没有，再去原型链上去寻找</p><p>而且对象可以直接调用原型的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span>=name,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span>=age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setName</span>=<span class="keyword">function</span>(<span class="params">name</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> p=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;mqm&#x27;</span>,<span class="number">22</span>)</span><br></pre></td></tr></table></figure><p>简单的原型链的继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Box</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Box</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> box = <span class="keyword">new</span> <span class="title class_">Box</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Box</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span> + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line">box.<span class="title function_">getValue</span>(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>不同对象函数的继承、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- ```js</span><br><span class="line">        <span class="comment">//父类型</span></span><br><span class="line">      function <span class="title function_">Supper</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.supProp = <span class="string">&quot;mqm&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//父  添加方法</span></span><br><span class="line">      Supper.prototype.ShowSupperProp=function()&#123;</span><br><span class="line">        console.log(<span class="built_in">this</span>.supProp);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//子类型</span></span><br><span class="line">      function <span class="title function_">Sub</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subProp = <span class="string">&quot;tom&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//创建父的实例对象给子的原型</span></span><br><span class="line">      Sub.prototype =<span class="keyword">new</span> <span class="title class_">Supper</span>()</span><br><span class="line">      <span class="comment">//让子类型的原型的constructor指向子类型</span></span><br><span class="line">      sub.prototype.construtctor= sub()</span><br><span class="line">      <span class="comment">//给子类型添加方法</span></span><br><span class="line">      sub.prototype.showSubProp = function()&#123;</span><br><span class="line">        console.log(<span class="built_in">this</span>.subProp);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//创建子类型的对象</span></span><br><span class="line">      <span class="keyword">var</span> sub= <span class="keyword">new</span> <span class="title class_">Sub</span>()</span><br><span class="line">      sub.showSubProp()</span><br><span class="line">      sub.ShowSupperProp()</span><br></pre></td></tr></table></figure><p>组合继承</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   function Person(name,age)&#123;</span><br><span class="line">        this.name=name</span><br><span class="line">        this.age=age</span><br><span class="line">      &#125;</span><br><span class="line">      Person.prototype.setName=function(name)&#123;</span><br><span class="line">        tihs.name=name</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      function Student(name,age,price)&#123;</span><br><span class="line">        Person.call(this,name,age)//相当于this.person（name，age）</span><br><span class="line">        /*</span><br><span class="line">        this.name=name</span><br><span class="line">        this.age=age</span><br><span class="line">        */</span><br><span class="line">        this.price=price</span><br><span class="line">      &#125;</span><br><span class="line">//原型链继承</span><br><span class="line">      Student.prototype=new Person()</span><br><span class="line"></span><br><span class="line">      Student.prototype.constructor = Student</span><br><span class="line"></span><br><span class="line">      Student.prototype.setPrice=function(price)&#123;</span><br><span class="line">        this.price=price</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      var s = new Student(&#x27;mqm&#x27;,22,22)</span><br><span class="line">      console.log(s);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/11/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B/"/>
      <url>/2023/03/11/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="js数据类型检测"><a href="#js数据类型检测" class="headerlink" title="js数据类型检测"></a>js数据类型检测</h3><ol><li><strong>typeof</strong> 可以用来区分除了<code>null</code>类型以外的<strong>原始数据类型</strong>（<code>undefined</code>、<code>number</code>、<code>string</code>、<code>symbol</code>、<code>boolean</code>）和对象类型中的函数，针对其它类型时<code>typeof</code>一律返回<code>object</code>类型。</li><li><strong>instanceof</strong> 运算符用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上，所以它<strong>不能用来判断原始数据类型的数据</strong>。</li><li><strong>Object.prototype.toString.call</strong> 能够满足大部分场景下的需求，但它<strong>无法区分数字类型和数字对象类型</strong>（同理还有字符串类型和字符串对象类型等，）</li><li><strong>Array.isArray</strong> 用来判断是否是数组</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/11/js%E9%AB%98%E7%BA%A7/"/>
      <url>/2023/03/11/js%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="js-高级"><a href="#js-高级" class="headerlink" title="js 高级"></a>js 高级</h1><h4 id="基础类型总结"><a href="#基础类型总结" class="headerlink" title="基础类型总结"></a>基础类型总结</h4><p>基本类型</p><p>string(字符串)</p><p>Number（数字）</p><p>boolean（true   false)</p><p>undefined(undefined)</p><p>null(null)</p><p>对象类型</p><p>object:任意对象</p><p>function：一种特别的对象（可以执行的）</p><p>array：一种特别的对象（数值下标属性，内部数据是有序的）</p><p>判断数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">typeof</span>  返回数据类型的字符串表达  不能判断<span class="literal">null</span>  和obj</span><br><span class="line"><span class="number">2.</span><span class="keyword">instanceof</span>  判断对象的具体类型</span><br><span class="line"><span class="number">3.</span>=== </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例对象</span></span><br><span class="line">     <span class="comment">//类型：类型对象</span></span><br><span class="line">     <span class="keyword">function</span>  <span class="title function_">Person</span>(<span class="params">nam e,age</span>)&#123;<span class="comment">// 构造函数     类型</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> p=<span class="keyword">new</span> <span class="title class_">Person</span>()<span class="comment">//根据类型创建的实例对象</span></span><br></pre></td></tr></table></figure><p>区分null和undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//undefined</span></span><br><span class="line">    a = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//null</span></span><br></pre></td></tr></table></figure><p>什么时候将a赋值为null？</p><p>初始赋值为null，表明将要赋值为对象</p><p>结束前，让对象成为垃圾对象(被垃圾回收器  回收)；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=<span class="literal">null</span>;</span><br><span class="line"> <span class="comment">//确定对象就赋值</span></span><br><span class="line"> b=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">300</span>];</span><br><span class="line"> <span class="comment">//最后</span></span><br><span class="line">  b=<span class="literal">null</span>;<span class="comment">//让b指向的对象成为垃圾对象(被垃圾回收器  回收)；</span></span><br></pre></td></tr></table></figure><p>严格区分变量类型和数据类型</p><p>数据类型</p><ul><li>基本类型</li><li>对象类型</li></ul><p>变量类型(变量内存之的类型)</p><ul><li>基本类型（保存基本类型数据）</li><li>引用类型（保存的是地址值）</li></ul><p>什么是数据？</p><p>存储在内存中代表特定信息的“东西”，本质上为010101.</p><p>什么是内存？</p><p>可存储数据的空间（临时的）</p><p> 一块内存有量的数据</p><ul><li><p>内部存储的数据</p></li><li><p>地址值</p></li></ul><p>数据，内存，变量之间的关系？</p><ul><li>内存用来存储数据的空间</li><li>变量是内存的标识</li></ul><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><ul><li>什么是对象？<ul><li>多个数据的封装体</li><li>用来保存多个数据的容器</li></ul></li><li>为什么要用对象<ul><li>统一管理数据</li></ul></li><li>对象的组成<ul><li>属性 ：属性名和属性值组成</li><li>方法：一种特殊的属性（属性值是函数）</li></ul></li><li>如何访问对象内铺的数据<ul><li>.属性名   编码简单，有事不能用</li><li>[‘属性名’]：编码麻烦，通用</li></ul></li></ul><h4 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h4><ul><li>什么是函数<ul><li>多条语句的封装体</li><li>只有函数可以执行</li></ul></li><li>如何定义函数<ul><li>函数声明</li><li>声明表达式</li></ul></li><li>如何执行调用<ul><li>text（）；直接调用</li><li>obj.text()； 通过对象调用</li><li>new text();new调用</li><li>test.call/apply(obj);临时让text成为obj的方法进行调用</li></ul></li></ul><h5 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h5><ul><li>什么回调函数<ul><li>你定义的</li><li>没有调用</li><li>最终执行了</li></ul></li><li>常见的回调函数<ul><li>dom事件回调函数</li><li>定时器回调函数</li><li>Ajax回调函数</li><li>生命周期回调函数</li></ul></li></ul><h4 id="IIFE（匿名函数调用）"><a href="#IIFE（匿名函数调用）" class="headerlink" title="IIFE（匿名函数调用）"></a>IIFE（匿名函数调用）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11111111</span>);</span><br><span class="line">      &#125;)()</span><br></pre></td></tr></table></figure><ul><li>作用<ul><li>隐藏实现</li><li>不会污染外部（全局）命名空间</li></ul></li></ul><h4 id="函数高级"><a href="#函数高级" class="headerlink" title="函数高级"></a>函数高级</h4><h5 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h5><p>函数的prototype属性</p><ul><li>每个函数都有一个prototype属性，它默认指向一个object空对象（即为原型对象）</li><li>原型对象有一个属性constructor，它指向函数对象</li></ul><p>给原型对象添加属性（一般是方法）==&gt;实例对象引用</p><h6 id="显示原型和隐式原型"><a href="#显示原型和隐式原型" class="headerlink" title="显示原型和隐式原型"></a>显示原型和隐式原型</h6><ul><li><p>每个函数都有一个prototype  即显式原型</p></li><li><p>每个实例对象都有一个_proto_  （隐式原型）</p></li><li><p>对象的隐式原型的值为其对应构造函数显示原型的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.<span class="property">__proto__</span>===fun.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure></li></ul><p><img src="D:\前端\markdown\图片\QQ截图20220420205026.png" alt="QQ截图20220420205026.png"></p><h5 id="原型链（查找对象的属性）"><a href="#原型链（查找对象的属性）" class="headerlink" title="原型链（查找对象的属性）"></a>原型链（查找对象的属性）</h5><img src="https://img2018.cnblogs.com/blog/1153103/201902/1153103-20190228152227115-297624496.png"  /><h6 id="instanceof是如何判断的？"><a href="#instanceof是如何判断的？" class="headerlink" title="instanceof是如何判断的？"></a>instanceof是如何判断的？</h6><ul><li>表达式 A （实例对象）instanceof   </li><li>如果B函数的显示原型对象在A对象的原型链上  返回true  否则返回  false</li><li>Function是通过new自己产生的实例</li></ul><h4 id="执行上下文与执行上下文栈"><a href="#执行上下文与执行上下文栈" class="headerlink" title="执行上下文与执行上下文栈"></a>执行上下文与执行上下文栈</h4><p>变量声明提升</p><ul><li>通过var定义（声明）的变量，在定义语句之前就可以访问到</li><li>值：undefined</li></ul><p>函数声明提升</p><ul><li>通过function声明的函数，在之前就可以直接调用</li><li>值：函数定义（对象）</li></ul><h5 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h5><ul><li><p>代码分类</p><ul><li>全局代码</li><li>局部代码</li></ul></li><li><p>全局执行上下文</p><ul><li>在执行全局代码前将window确定为全局执行上下文‘</li><li>对全局数据进行预处理</li><li>var定义的全局变量==&gt;undefined  ，添加为window的属性</li><li>function声明的全局函数==&gt;赋值（fun)，添加为window的方法</li><li>开始执行上下文</li></ul></li><li><p>函数执行上下文</p><ul><li>在调用函数，准备执行函数体之前，创建函数执行上下文对象</li><li>对局部数据进行预处理</li><li>形参变量==&gt;赋值（实参）添加为执行上下文属性</li><li>arguments==&gt;赋值（实参列表）</li><li>var   局部变量==&gt;undefined </li><li>unction声明的局部函数==&gt;赋值（fun)，</li><li>this==&gt;赋值(调用函数对象)</li><li>开始执行函数代码</li></ul></li><li><p>执行上下文栈</p><ul><li><p>全局代码执行前，js会创建一个栈来存储管理所有的执行上下文对象</p></li><li><p>在全局执行上下文确定后，将其添加到栈中</p></li><li><p>在函数执行上下文创建后，将其添加到栈中</p></li><li><p>、当前函数执行完后将栈顶的对象移除栈</p></li><li><p>代码执行完后，栈中只剩下window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.进入全局执行上下文</span></span><br><span class="line">     <span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line">     <span class="keyword">var</span> bar=<span class="keyword">function</span> (<span class="params">x</span>)&#123;</span><br><span class="line">       <span class="keyword">var</span> b=<span class="number">5</span>;</span><br><span class="line">       <span class="title function_">foo</span>(x+b)      <span class="comment">//3.进入foo执行上下文</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> foo=<span class="keyword">function</span>(<span class="params">Y</span>)&#123;</span><br><span class="line">       <span class="keyword">var</span> c=<span class="number">6</span>;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(a+c+Y);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">bar</span>(<span class="number">10</span>);     <span class="comment">//2.进入bar执行上下文</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="作用域与作用域链"><a href="#作用域与作用域链" class="headerlink" title="作用域与作用域链"></a>作用域与作用域链</h3><p>作用域</p><ul><li>代码所在的一块区域</li><li>它是静态的，在编写代码是就确定了</li></ul><p>分类</p><ul><li>全局作用域</li><li>函数作用域</li><li>es6  有了块级作用域（let）</li></ul><p>作用</p><ul><li>隔离变量，不同作用域下同名变量不会冲突</li></ul><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;Mozilla&quot;</span>; <span class="comment">// name 是一个被 init 创建的局部变量</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">displayName</span>(<span class="params"></span>) &#123; <span class="comment">// displayName() 是内部函数，一个闭包</span></span><br><span class="line"></span><br><span class="line">      <span class="title function_">alert</span>(name); <span class="comment">// 使用了父函数中声明的变量</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">displayName</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><p><code>init()</code> 创建了一个局部变量 <code>name</code> 和一个名为 <code>displayName()</code> 的函数。<code>displayName()</code> 是定义在 <code>init()</code> 里的内部函数，并且仅在 <code>init()</code> 函数体内可用。请注意，<code>displayName()</code> 没有自己的局部变量。然而，因为它可以访问到外部函数的变量，所以 <code>displayName()</code> 可以使用父函数 <code>init()</code> 中声明的变量 <code>name</code> 。</p><ul><li>闭包存在与嵌套的内部函数中</li><li>产生闭包的条件<ul><li>函数嵌套</li><li>内部函数引用了外部的数据</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    a++</span><br><span class="line">    <span class="title function_">alert</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f=<span class="title function_">fn</span>()</span><br><span class="line"><span class="title function_">f</span>()<span class="comment">//3</span></span><br><span class="line"><span class="title function_">f</span>()<span class="comment">//4</span></span><br></pre></td></tr></table></figure><p>引用的外部数据回存在闭包中</p><p>（第一次引用内部函数）</p><p><img src="D:\前端\markdown\图片\QQ图片20220427200814.png"></p><p>（第二次引用，数据a的自增并没有消失，而是存在了闭包中）</p><p><img src="D:\前端\markdown\图片\QQ图片20220427201005.png"></p><h5 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h5><ol><li>使用内部变量在函数执行后，仍存活在内存中（延长了局部变量的生命周期）</li><li>让函数外部可以操作到函数内部的数据<ul><li>函数执行完后，局部变量消失。存在于闭包中的标量有可能存在</li></ul></li><li>在函数外部可以直接访问内部的局部变量吗<ul><li>不能，可以通过闭包让外部操作他</li></ul></li></ol><h5 id="闭包的生命周期"><a href="#闭包的生命周期" class="headerlink" title="闭包的生命周期"></a>闭包的生命周期</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;<span class="comment">//闭包产生</span></span><br><span class="line">     a++</span><br><span class="line">     <span class="title function_">alert</span>(a)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> fn1</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> f=<span class="title function_">fn</span>()</span><br><span class="line"> <span class="title function_">f</span>()<span class="comment">//3</span></span><br><span class="line"> <span class="title function_">f</span>()<span class="comment">//4</span></span><br><span class="line"> f=<span class="literal">null</span><span class="comment">//闭包死亡</span></span><br></pre></td></tr></table></figure><h5 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h5><p>自定义js 模块</p><ul><li><p>具有特定功能的js文件</p></li><li><p>将所有数据和功能都封装在函数内部 </p></li><li><p>只向外暴露一个包含     n个方法的对象或函数</p></li><li><p>模块的使用者，只需要通过模块暴露的对象调用方法来实现对应的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myName</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> name=<span class="string">&#x27;mqm&#x27;</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">killPeople</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">doOtherThing</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="property">toLocaleUpperCase</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">killPeople</span>:killPeople ,</span><br><span class="line">        <span class="attr">doOtherThing</span>:doOtherThing</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="闭包的缺点和解决"><a href="#闭包的缺点和解决" class="headerlink" title="闭包的缺点和解决"></a>闭包的缺点和解决</h5><p>缺点</p><ul><li>函数执行完之后，函数内的局部变量没有释放，占用的内存时间回变长</li><li>容易造成内存泄漏</li></ul><p>解决</p><ul><li>能不用闭包就不用闭包</li><li>及时释放</li></ul><p>内存溢出</p><ul><li>程序运行的错误</li><li>当程序运行需要的内存超过了剩余的内存是，就抛出了内存溢出的错误</li></ul><p>内存泄漏</p><ul><li><p>占用的内存没有及时释放</p></li><li><p>内存泄漏积累多了就用一导致内存溢出</p></li><li><p>常见的内存溢出</p><ul><li>意外的全局变量</li><li>没有及时清理计时器或回调函数</li><li>闭包  </li></ul></li></ul><h3 id="面向对象高级"><a href="#面向对象高级" class="headerlink" title="面向对象高级"></a>面向对象高级</h3><h4 id="对象创建模式"><a href="#对象创建模式" class="headerlink" title="对象创建模式"></a>对象创建模式</h4><ol><li><h4 id="object构造函数模式"><a href="#object构造函数模式" class="headerlink" title="object构造函数模式"></a>object构造函数模式</h4><ul><li><p>套路：先创建object对象，在动态添加属性</p></li><li><p>使用场景：开始有不确定对象内部数据</p></li><li><p>问题：语句太多</p></li><li><p>```js<br> /<em>人 ：name：tom     ，age：12</em>/</p><pre><code>  var p=new Object()  p.name=&quot;tom&quot;  p.age=12  p.setName = function(name)&#123;    this.name=name  &#125;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. #### 对象字面量模式</span><br><span class="line">   </span><br><span class="line">   - 套路：使用&#123;&#125;创建对象，同时指定属性/方法</span><br><span class="line">   </span><br><span class="line">   - 使用场景：对象数据确定</span><br><span class="line">   </span><br><span class="line">   - 问题：存在多个对象，有重复代码</span><br><span class="line">   </span><br><span class="line">   - ```js</span><br><span class="line">      var p=&#123;</span><br><span class="line">             name:&quot;tom&quot;,</span><br><span class="line">             age:12,</span><br><span class="line">             setName:function(name)&#123;</span><br><span class="line">               this.name=name</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><ul><li><p>套路：通过工厂函数动态创建对象并返回</p></li><li><p>使用场景：需要创建多个对象</p></li><li><p>问题：对象没有具体的类型，都是object</p></li><li><p>```js</p><pre><code> function creatPerson(name,age)&#123;    var obj=&#123;      name:name,      age:age,      setName:function(name)&#123;        this.name=name      &#125;     &#125;    return obj  &#125;  var p=creatPerson(&quot;mqm&quot;,22)</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. #### 自定义构造函数模式</span><br><span class="line">   </span><br><span class="line">   - 套路：自定义构造函数，通过new创建对象</span><br><span class="line">   </span><br><span class="line">   - 使用场景：需要创建多个类型确定的对象</span><br><span class="line">   </span><br><span class="line">   - 问题：每个对象都有相同的数据，浪费内存</span><br><span class="line">   </span><br><span class="line">   - ```js</span><br><span class="line">       function Preson(name,age)&#123;</span><br><span class="line">             this.name=name,</span><br><span class="line">             this.age=age,</span><br><span class="line">             this.setName=function (name)&#123;</span><br><span class="line">               this.name=name</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           var p=new Preson(&#x27;mqm&#x27;,22)</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="构造函数-原型的组合模式"><a href="#构造函数-原型的组合模式" class="headerlink" title="构造函数+原型的组合模式"></a>构造函数+原型的组合模式</h4><ul><li><p>套路：自定义构造函数，属性在函数中，方法添加到原型上</p></li><li><p>适用场景：需要创建多个类型确定的对象</p></li><li><p>```js<br>function Person(name,age){</p><pre><code>  this.name=name,  this.age=age&#125;Person.prototype.setName=function(name)&#123;  this.name=name&#125;var p=new Person(&#39;mqm&#39;,22)</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 继承模式</span><br><span class="line"></span><br><span class="line">1. #### 原型链继承</span><br><span class="line">   </span><br><span class="line">   1. 套路：</span><br><span class="line">      </span><br><span class="line">      1. 定义父类型构造函数</span><br><span class="line">      </span><br><span class="line">      2. 给父类型原型添加方法</span><br><span class="line">      </span><br><span class="line">      3. 定义子类型的构造函数</span><br><span class="line">      </span><br><span class="line">      4. 创建父类型的对象赋值给子类型的原型</span><br><span class="line">      </span><br><span class="line">      5. 将子类型原型的构造属性设置为子类型</span><br><span class="line">      </span><br><span class="line">      6. 给子类型原型添加方法</span><br><span class="line">      </span><br><span class="line">      7. 创建子类型的对象：可以调用父类型的方法</span><br><span class="line"></span><br><span class="line">2. 关键</span><br><span class="line">   </span><br><span class="line">   - 子类型的原型为父类型的一个实例对象</span><br><span class="line">   </span><br><span class="line">   - ```js</span><br><span class="line">           //父类型</span><br><span class="line">         function Supper()&#123;</span><br><span class="line">           this.supProp = &quot;mqm&quot;</span><br><span class="line">         &#125;</span><br><span class="line">         //父  添加方法</span><br><span class="line">         Supper.prototype.ShowSupperProp=function()&#123;</span><br><span class="line">           console.log(this.supProp);</span><br><span class="line">         &#125;</span><br><span class="line">         //子类型</span><br><span class="line">         function Sub() &#123;</span><br><span class="line">           this.subProp = &quot;tom&quot;</span><br><span class="line">         &#125;</span><br><span class="line">         //创建父的实例对象给子的原型</span><br><span class="line">         Sub.prototype =new Supper()</span><br><span class="line">         //让子类型的原型的constructor指向子类型</span><br><span class="line">         sub.prototype.construtctor= sub()</span><br><span class="line">         //给子类型添加方法</span><br><span class="line">         sub.prototype.showSubProp = function()&#123;</span><br><span class="line">           console.log(this.subProp);</span><br><span class="line">         &#125;</span><br><span class="line">         //创建子类型的对象</span><br><span class="line">         var sub= new Sub()</span><br><span class="line">         sub.showSubProp()</span><br><span class="line">         sub.ShowSupperProp()</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="借用构造函数继承-假的"><a href="#借用构造函数继承-假的" class="headerlink" title="借用构造函数继承(假的)"></a>借用构造函数继承(假的)</h4><ol><li><p>套路：</p><ol><li>定义父函数构造函数</li><li>定义子函数构造函数</li><li>在子类型构造函数中调用父类型构造</li></ol></li><li><p>关键：</p><ol><li>在子类型构造函数中通用call（）调用父类型构造函数</li></ol></li><li><p>代码</p><ul><li>```js<br>  function Person(name,age){<pre><code>    this.name=name    this.age=age  &#125;  function Student(name,age,price)&#123;    Person.call(this,name,age)//相当于this.Person（name，age）    /*    this.name=name    this.age=age*/    this.price=price  &#125;  var s= new Student(&#39;mqm&#39;,22,22)  console.log(s);</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. #### 组合继承</span><br><span class="line">   </span><br><span class="line">   1. 利用原型链实现对父类型对象的方法继承</span><br><span class="line">   </span><br><span class="line">   2. 利用call()借用父类型构建函数初始化相同属性</span><br><span class="line">   </span><br><span class="line">   3. 代码</span><br><span class="line">      </span><br><span class="line">      ```js</span><br><span class="line">           function Person(name,age)&#123;</span><br><span class="line">              this.name=name</span><br><span class="line">              this.age=age</span><br><span class="line">            &#125;</span><br><span class="line">            Person.prototype.setName=function(name)&#123;</span><br><span class="line">              tihs.name=name</span><br><span class="line">            &#125;</span><br><span class="line">      </span><br><span class="line">            function Student(name,age,price)&#123;</span><br><span class="line">              Person.call(this,name,age)//相当于this.person（name，age）</span><br><span class="line">              /*</span><br><span class="line">              this.name=name</span><br><span class="line">              this.age=age</span><br><span class="line">              */</span><br><span class="line">              this.price=price</span><br><span class="line">            &#125;</span><br><span class="line">      //原型链继承</span><br><span class="line">            Student.prototype=new Person()</span><br><span class="line">      </span><br><span class="line">            Student.prototype.constructor = Student</span><br><span class="line">      </span><br><span class="line">            Student.prototype.setPrice=function(price)&#123;</span><br><span class="line">              this.price=price</span><br><span class="line">            &#125;</span><br><span class="line">      </span><br><span class="line">            var s = new Student(&#x27;mqm&#x27;,22,22)</span><br><span class="line">            console.log(s);</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol><h3 id="线程机制与事件机制"><a href="#线程机制与事件机制" class="headerlink" title="线程机制与事件机制"></a>线程机制与事件机制</h3><ol><li><h4 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h4><ol><li><p>进程</p><ul><li>程序的一次执行，它占有一篇独有的内存空间</li><li>通过windows任务管理器查看进程</li></ul></li><li><p>线程</p><ul><li>是进程里的一个独立执行单元</li><li>是程序执行的一个完整流程</li><li>是cpu的最小单元</li></ul></li><li><p>图</p><p><img src="D:\前端\markdown\图片\1048430-20170710134630947-1108860021.png"></p><p><img src="D:\前端\markdown\图片\1048430-20170710134655212-558296442.png"></p><p><img src="D:\前端\markdown\图片\1048430-20170710140043259-1480436304.png"></p></li><li><p>相关知识</p><ul><li>程序必须运行在某个进程的某个线程上</li><li>一个程序中至少有一个运行的线程：主线程，进程启动后自动创建</li><li>进程中可以同时运行多个线程，我们会说程序是多线程运行</li><li>一个进程内的数据可以供其中多个线程直接共享</li><li>多个进程之间的数据是不能直接共享的</li><li>线程池：保存多个线程对象的容器，实现线程对象的反复利用</li></ul></li><li><p>相关问题</p><ol><li>多线程与多进程<ul><li>多进程：一个程序可以同时运行多个实例</li><li>多线程：一个进程，同时多个线程</li></ul></li><li>单线程与多线程<ul><li>多线程：<ul><li>优点：能有效提升cpu的利用率</li><li>缺点：创建多线程开销、线程间切换开销、死锁与状态同步</li></ul></li><li>单线程<ul><li>优点：顺序变成简单易懂</li><li>缺点：效率低</li></ul></li></ul></li><li>浏览器是多线程运行的的</li><li>浏览器的进程<ul><li>多进程：chrome，edge</li><li>单进程：firfox，ie</li></ul></li></ol></li></ol></li><li><h4 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h4><ol><li><p>内核：支撑浏览器运行的最核心的程序</p><ul><li>chrome，safari：webkit、现在Blink</li><li>firefox：Gecko</li><li>ie：Trident</li></ul></li><li><p>内核由很多模块组成</p><ul><li><p>主线程</p><ul><li>js引擎模块</li><li>html、css文档解析模块</li><li>DOM/CSS模块</li><li>布局和渲染模块：负责页面的布局和效果的绘制</li><li>…..</li></ul></li><li><p>分线程</p><ul><li>定时器模块</li><li>DOM事件相应模块</li><li>网络请求模块：ajax</li></ul></li></ul></li></ol></li><li><h4 id="js引擎执行代码的基本流程"><a href="#js引擎执行代码的基本流程" class="headerlink" title="js引擎执行代码的基本流程"></a>js引擎执行代码的基本流程</h4><ul><li>先执行初始化代码：包含一些特别的代码<ul><li>设置定时器</li><li>绑定监听</li><li>发送ajax请求</li></ul></li><li>后面在某个时刻才会执行回调代码</li><li>为什么js要用单线程模式，而不是用多线程模式<ul><li>js作为浏览器脚本语言，js的主要用途是与用户互动，以及操作dom</li><li>这决定了它只能是单线程，否则会带来很复杂的同步问题</li></ul></li></ul></li><li><p>事件循环模型</p><ol><li>原理图<img src="D:\前端\markdown\图片\src=http___img-blog.csdnimg.cn_20210209113920787.png_x-oss-process=image_watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VkaXNvbkxhbmdsYW5n,size_16,color_FFFFFF,t_70&refer.webp"></li></ol></li><li><p>相关概念</p><ul><li>执行栈</li><li>浏览器内核</li><li>回调队列<ul><li>任务队列</li><li>消息队列</li><li>事件队列</li></ul></li><li>事件循环</li><li>事件驱动模型</li><li>请求响应模型</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的个人博客文章</title>
      <link href="/2023/03/11/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/2023/03/11/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/11/hello-world/"/>
      <url>/2023/03/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
